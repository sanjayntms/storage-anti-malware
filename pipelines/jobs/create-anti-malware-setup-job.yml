# This job creates the resources required for malware detection:
#
#   1. Builds and pushes the ClamAV container image to the container registry
#   2. Creates an Azure Container Instances resource and deploys the ClamAV container image there
#   3. Builds, publishes and deploys the Azure Function implementing the anti-malware for monitoring new/changed blobs
#
# Note: This job depends on an existing Azure Container Registry that is created by the base infrastructure job.

---
parameters:
  - name: environment
    type: string
  - name: resourceGroupName
    type: string
  - name: containerRegistryServiceConnectionName
    type: string
  - name: clamAVContainerRepositoryName
    type: string
  - name: buildConfiguration
    type: string
  - name: imageTag
  - name: serviceConnectionName
    type: string
  - name: location
    type: string
  - name: keyVaultName
    type: string
  - name: containerRegistryName
    type: string
  - name: containerRegistryLoginServerUri
    type: string
  - name: containerGroupName
    type: string
  - name: containerInstancesBaseUri
    type: string
  - name: antiMalwareFunctionAppName
    type: string
  - name: storageAccountName
    type: string
  - name: storageContainerName
    type: string
  - name: smtpServer
    type: string
  - name: smtpPort
    type: string
  - name: smtpDomain
    type: string
  - name: malwareNotificationRecipients
    type: string
  - name: applicationInsightsName
    type: string
  - name: logAnalyticsWorkspaceName
    type: string
  - name: dependsOn
    type: object
    default: []

jobs:
  - deployment: AntiMalwareSetup
    environment: ${{ parameters.environment }}
    dependsOn:
      - ${{ each depends in parameters.dependsOn }}:
          - ${{ depends }}
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: Docker@2
              displayName: Login to ACR
              inputs:
                command: login
                containerRegistry: ${{ parameters.containerRegistryServiceConnectionName }}

            - task: PowerShell@2
              displayName: Downloading ClamAV image source
              inputs:
                targetType: 'filePath'
                filePath: "./Get-ClamAV.ps1"

            - task: Docker@2
              displayName: Build and push ClamAV image
              inputs:
                command: buildAndPush
                repository: ${{ parameters.clamAVContainerRepositoryName }}
                buildContext: "./clamav-container/"
                tags: |
                    ${{ parameters.imageTag }}
                    latest

            - task: AzureCLI@2
              displayName: Set Azure IDs to task variables
              inputs:
                azureSubscription: ${{ parameters.serviceConnectionName }}
                scriptType: "pscore"
                scriptLocation: "scriptPath"
                ScriptPath: "./scripts/environment/New-EnvironmentVariables.ps1"
                addSpnToEnvironment: true

            - template: ../templates/aci-anti-malware.yml
              parameters:
                serviceConnectionName: ${{ parameters.serviceConnectionName }}
                subscriptionId: $(subscriptionId)
                resourceGroupName: ${{ parameters.resourceGroupName }}
                location: ${{ parameters.location }}
                keyVaultName: ${{ parameters.keyVaultName }}
                containerRegistryName: ${{ parameters.containerRegistryName }}
                containerGroupName: ${{ parameters.containerGroupName }}
                dnsNameLabel: ${{ parameters.containerGroupName }}
                clamAVContainerImage: ${{ parameters.containerRegistryLoginServerUri }}/${{ parameters.clamAVContainerRepositoryName }}:latest

            - task: DotNetCoreCLI@2
              displayName: Run unit tests
              inputs:
                command: test
                projects: '**/*Tests/*.csproj'
                arguments: '--configuration ${{ parameters.buildConfiguration }}'

            - task: DotNetCoreCLI@2
              displayName: Build and publish anti-malware function
              inputs:
                command: 'publish'
                configuration: '--configuration ${{ parameters.buildConfiguration }}'
                projects: '**/*AntiMalwareFunction.csproj'
                publishWebProjects: false
                zipAfterPublish: false
                modifyOutputPath: true
                arguments: '/p:AssemblyVersion=1.0.0.$(Build.BuildId) -o "$(Build.ArtifactStagingDirectory)/AntiMalwareFunction'

            - task: ArchiveFiles@2
              displayName: Archive anti-malware function files
              inputs:
                rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/AntiMalwareFunction/AntiMalwareFunction"
                includeRootFolder: false
                archiveFile: "$(Build.ArtifactStagingDirectory)/AntiMalwareFunction.zip"

            - template: ../templates/azure-function-anti-malware.yml
              parameters:
                serviceConnectionName: ${{ parameters.serviceConnectionName }}
                subscriptionId: $(subscriptionId)
                resourceGroupName: ${{ parameters.resourceGroupName }}
                location: ${{ parameters.location }}
                keyVaultName: ${{ parameters.keyVaultName }}
                functionAppName: ${{ parameters.antiMalwareFunctionAppName }}
                clamAVServerUri: ${{ parameters.containerInstancesBaseUri }}
                storageAccountName: ${{ parameters.storageAccountName }}
                smtpServer: ${{ parameters.smtpServer }}
                smtpPort: ${{ parameters.smtpPort }}
                smtpDomain: ${{ parameters.smtpDomain }}
                storageContainerName: ${{ parameters.storageContainerName }}
                notificationRecipients: ${{ parameters.malwareNotificationRecipients }}
                applicationInsightsName: ${{ parameters.applicationInsightsName }}
                logAnalyticsWorkspaceName: ${{ parameters.logAnalyticsWorkspaceName }}
                diagnosticSettingName: setByPipeline
