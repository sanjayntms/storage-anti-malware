# This pipeline deploys the Azure Function for monitoring new or changed blobs in Data Lake (Storage Account).
# This pipeline is expected to be executed by the create-anti-malware-setup.yml pipeline and also depends
# on resources created by the very main, create-base-infrastucture.yml, pipeline, namely:
#
#   * Key Vault (containing Data Lake connection string)
#   * Application Insights and Log Analytics

---
parameters:
  - name: subscriptionId
    type: string
  - name: serviceConnectionName
    type: string
  - name: resourceGroupName
    type: string
  - name: location
    default: westeurope
    type: string
  - name: keyVaultName
    type: string
  - name: functionAppName
    type: string
  - name: clamAVServerUri
    type: string
  - name: storageAccountName
    type: string
  - name: storageContainerName
    type: string
  - name: smtpServer
    type: string
  - name: smtpPort
    type: string
  - name: smtpDomain
    type: string
  - name: notificationRecipients
    type: string
  - name: applicationInsightsName
    type: string
  - name: logAnalyticsWorkspaceName
    type: string
  - name: diagnosticSettingName
    type: string

steps:
  - task: AzureKeyVault@1
    displayName: Retrieve secrets from Key Vault
    inputs:
      azureSubscription: ${{ parameters.serviceConnectionName }}
      keyVaultName: ${{ parameters.keyVaultName }}
      secretsFilter: 'dataLakePrimaryKey,dataLakeConnectionString,smtpUsername,smtpPassword'

  - task: AzureResourceManagerTemplateDeployment@3
    displayName: Deploy Azure Function
    inputs:
      deploymentScope: 'Resource Group'
      subscriptionId: ${{ parameters.subscriptionId }}
      azureResourceManagerConnection: ${{ parameters.serviceConnectionName }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      location: ${{ parameters.location }}
      action: 'Create Or Update Resource Group'
      templateLocation: 'Linked artifact'
      csmFile: "./arm-templates/azure_function_antimalware.json"
      csmParametersFile: "./arm-templates/azure_function_antimalware.parameters.json"
      overrideParameters: >
        -functionAppName ${{ parameters.functionAppName }}
        -location ${{ parameters.location }}
        -clamAVServerUri ${{ parameters.clamAVServerUri }}
        -dataLakeAccountName ${{ parameters.storageAccountName }}
        -dataLakeAccountKey $(dataLakePrimaryKey)
        -dataLakeConnectionString $(dataLakeConnectionString)
        -dataLakeServiceEndpoint https://${{ parameters.storageAccountName }}.dfs.core.windows.net/
        -dataLakeContainerName ${{ parameters.storageContainerName }}
        -smtpServer ${{ parameters.smtpServer }}
        -smtpPort ${{ parameters.smtpPort }}
        -smtpDomain ${{ parameters.smtpDomain }}
        -smtpUsername $(smtpUsername)
        -smtpPassword "$(smtpPassword)"
        -notificationSender $(smtpUsername)
        -notificationRecipients ${{ parameters.notificationRecipients }}
        -applicationInsightsName ${{ parameters.applicationInsightsName }}
        -logAnalyticsWorkspaceName ${{ parameters.logAnalyticsWorkspaceName }}
        -diagnosticSettingName ${{ parameters.diagnosticSettingName }}
      deploymentMode: 'Incremental'
      deploymentName: 'azure-function-storage-trigger'
      deploymentOutputs: 'azureFunctionDeploymentOutputs'

  - task: AzureCLI@2
    displayName: Process Azure Function deployment output
    inputs:
      azureSubscription: ${{ parameters.serviceConnectionName }}
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $var=ConvertFrom-Json '$(azureFunctionDeploymentOutputs)'
        $value=$var.azureFunctionMsiObject.value
        Write-Host "##vso[task.setvariable variable=webAppMsi;]$value"
        $value=$var.azureFunctionName.value
        Write-Host "##vso[task.setvariable variable=webAppName;]$value"

  - task: AzureRmWebAppDeployment@4
    displayName: Deploy anti-malware app service
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: ${{ parameters.serviceConnectionName }}
      appType: 'functionApp'
      WebAppName: $(webAppName)
      packageForLinux: '$(Pipeline.Workspace)/**/AntiMalwareFunction.zip'
