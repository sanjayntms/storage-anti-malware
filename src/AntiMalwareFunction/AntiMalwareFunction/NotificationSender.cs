namespace AntiMalwareFunction
{
    using System;
    using System.Net;
    using System.Net.Mail;

    /// <summary>
    /// Notification sender.
    /// </summary>
    public class NotificationSender : IDisposable
    {
        private readonly string NotificationSubject = "Malware Detection Notification";
        private readonly string NotificationSenderName = "DO NOT REPLY";

        private SmtpClient _smtpClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationSender"/> class.
        /// </summary>
        /// <param name="smtpServer">SMTP server</param>
        /// <param name="smtpPort">SMTP port</param>
        /// <param name="smtpDomain">SMTP domain (optional)</param>
        /// <param name="smtpUsername">SMTP username</param>
        /// <param name="smtpPassword">SMTP password</param>
        public NotificationSender(
            string smtpServer,
            int smtpPort,
            string smtpDomain,
            string smtpUsername,
            string smtpPassword)
        {
            if (string.IsNullOrEmpty(smtpServer)
                || string.IsNullOrEmpty(smtpUsername)
                || string.IsNullOrEmpty(smtpPassword)
                || smtpPort == 0)
            {
                throw new ArgumentNullException("Required configuration missing");
            }

            _smtpClient = new SmtpClient(smtpServer)
            {
                Port = smtpPort,
                EnableSsl = true,
                UseDefaultCredentials = false,
            };

            NetworkCredential networkCredential = string.IsNullOrEmpty(smtpDomain)
                ? new NetworkCredential(smtpUsername, smtpPassword)
                : new NetworkCredential(smtpUsername, smtpPassword, smtpDomain);

            _smtpClient.Credentials = networkCredential;
        }

        /// <summary>
        /// Sends a notification.
        /// </summary>
        /// <param name="fromAddress">The email address of the notification sender.</param>
        /// <param name="toAddresses">The email address of the notification recipient.</param>
        /// <param name="message">The main notification message.</param>
        /// <param name="containerName">The storage container name for details.</param>
        /// <param name="blobName">The blob name (and path) for details.</param>
        public void SendNotification(
            string fromAddress, string[] toAddresses,
            string message, string containerName, string blobName)
        {
            string body = $"{message}\n\nDetails:\n  - Container: {containerName}\n  - Blob: {blobName}";

            MailMessage mailMessage = new MailMessage()
            {
                Sender = new MailAddress(fromAddress, NotificationSenderName),
                From = new MailAddress(fromAddress, NotificationSenderName),
                Subject = NotificationSubject,
                Body = body,
                Priority = MailPriority.High
            };

            foreach (string toAddress in toAddresses)
            {
                mailMessage.To.Add(new MailAddress(toAddress));
            }

            _smtpClient.Send(mailMessage);
        }

        /// <inheritdoc />
        public void Dispose()
        {
            _smtpClient.Dispose();
        }
    }
}
