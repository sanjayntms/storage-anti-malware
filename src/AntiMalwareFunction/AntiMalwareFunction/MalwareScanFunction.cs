namespace AntiMalwareFunction
{
    using System;
    using System.IO;
    using System.Threading.Tasks;
    using AntiMalwareFunction.DataLake;
    using Microsoft.Azure.WebJobs;
    using Microsoft.Extensions.Logging;
    using nClam;

    /// <summary>
    /// Function for scanning new or changed blobs for malware.
    /// </summary>
    public static class MalwareScanFunction
    {
        private static readonly long DefaultMaxStreamSizeInBytes = 268435456;

        /// <summary>
        /// Scans the blob that triggered the function for malware.
        /// If malware is detected, the blob is deleted and a notification is sent.
        /// </summary>
        /// <param name="blobStream">The blob stream.</param>
        /// <param name="name">The name of the blob.</param>
        /// <param name="logger">A logger instance.</param>
        [FunctionName("MalwareScan")]
        public static async Task Run(
            [BlobTrigger("%StorageContainerName%/{name}", Connection = "DataLakeConnectionString")]
            Stream blobStream, string name, ILogger logger)
        {
            logger.LogInformation($"Malware scan triggered for blob \"{name}\" ({blobStream.Length} bytes)");

            ClamClient clamClient = CreateClamClient(blobStream.Length);
            ClamScanResult scanResult;

            try
            {
                scanResult = await clamClient.SendAndScanFileAsync(blobStream).ConfigureAwait(false);
            }
#pragma warning disable CA1031 // Do not catch general exception types
            catch (Exception e)
#pragma warning restore CA1031 // Do not catch general exception types
            {
                string errorMessage = $"ClamAV failed to scan blob \"{name}\": {e.Message}";
                logger.LogCritical(errorMessage);
                return;
            }

            switch (scanResult.Result)
            {
                case ClamScanResults.Clean:
                    {
                        logger.LogInformation($"No threat detected in blob \"{name}\": {scanResult}");
                        break;
                    }
                case ClamScanResults.VirusDetected:
                    {
                        logger.LogInformation($"Warning: Threat detected in blob \"{name}\": {scanResult}");
                        string containerName = GetEnvironmentVariable("StorageContainerName");

                        DataLakeManager dataLakeManager = CreateDataLakeManager();

                        if (await dataLakeManager.DeleteFileAsync(containerName, name))
                        {
                            logger.LogInformation($"Blob \"{name}\" deleted");
                            SendNotification(
                                "Malicious file was detected and automatically deleted",
                                GetEnvironmentVariable("StorageContainerName"), name);
                        }
                        else
                        {
                            logger.LogCritical($"Warning: Failed to delete malicious blob \"{name}\"!");
                            SendNotification(
                                "Malicious file was detected, but the system failed to automatically delete it",
                                GetEnvironmentVariable("StorageContainerName"), name);
                        }

                        break;
                    }
                case ClamScanResults.Unknown:
                case ClamScanResults.Error:
                    {
                        logger.LogError($"ClamAV failed to scan blob \"{name}\": {scanResult.RawResult}");
                        break;
                    }
                default:
                    {
                        logger.LogError($"ClamAV returned an unexpected scan result for blob \"{name}\": {scanResult.RawResult}");
                        break;
                    }
            }
        }

        /// <summary>
        /// Sends a notification with the given message.
        /// </summary>
        /// <param name="message">The message to send.</param>
        /// <param name="containerName">The Data Lake container name.</param>
        /// <param name="blobName">The blob name.</param>
        private static void SendNotification(string message, string containerName, string blobName)
        {
            if (!int.TryParse(GetEnvironmentVariable("SMTPPort"), out int smtpPort))
            {
                throw new InvalidCastException("Failed to parse SMTP port");
            }

            using NotificationSender notificationSender = new NotificationSender(
                GetEnvironmentVariable("SMTPServer"),
                smtpPort,
                GetEnvironmentVariable("SMTPDomain"),
                GetEnvironmentVariable("SMTPUsername"),
                GetEnvironmentVariable("SMTPPassword"));

            notificationSender.SendNotification(
                GetEnvironmentVariable("NotificationSender"),
                GetEnvironmentVariable("NotificationRecipients").Split(','),
                message,
                containerName,
                blobName);
        }

        /// <summary>
        /// Creates a new Data Lake manager instance.
        /// </summary>
        /// <returns>A newly created <see cref="DataLakeManager"/> instance.</returns>
        private static DataLakeManager CreateDataLakeManager()
        {
            string accountName = GetEnvironmentVariable("DataLakeAccountName");
            string accountKey = GetEnvironmentVariable("DataLakeAccountKey");
            string serviceEndpoint = GetEnvironmentVariable("DataLakeServiceEndpoint");
            return new DataLakeManager(accountName, accountKey, serviceEndpoint);
        }

        /// <summary>
        /// Creates a ClamAV client based on the existing configuration.
        /// </summary>
        /// <param name="expectedStreamSizeInBytes">The expected stream size in bytes.</param>
        /// <returns>A newly created <see cref="ClamClient"/> instance.</returns>
        private static ClamClient CreateClamClient(long expectedStreamSizeInBytes = 0)
        {
            string clamAvServer = GetEnvironmentVariable("ClamAVServer");
            string clamAvPortAsString = GetEnvironmentVariable("ClamAVPort");

            if (string.IsNullOrEmpty(clamAvServer)
                || string.IsNullOrEmpty(clamAvPortAsString))
            {
                throw new NullReferenceException("Required ClamAV configuration missing");
            }

            if (!int.TryParse(clamAvPortAsString, out int clamAvPort))
            {
                throw new InvalidCastException("Failed to parse ClamAV port value");
            }

            ClamClient clamClient = new ClamClient(clamAvServer, clamAvPort)
            {
                MaxStreamSize = (expectedStreamSizeInBytes > 0)
                    ? CalculateLowestPowerOfTwo(expectedStreamSizeInBytes)
                    : DefaultMaxStreamSizeInBytes
            };

            return clamClient;
        }

        /// <summary>
        /// Calculates the smallest power of 2 greater than or equal to the given number.
        /// </summary>
        /// <param name="number">The input.</param>
        /// <returns>The smallest power of 2 greater than or equal to the given input.</returns>
        private static long CalculateLowestPowerOfTwo(long number)
        {
            return (long)Math.Pow(2, Math.Ceiling(Math.Log(number, 2)));
        }

        /// <summary>
        /// Resolves the value of the environment variable with the given name.
        /// </summary>
        /// <param name="name">The name of the environment variable.</param>
        /// <returns>The value of the environment value.</returns>
        private static string GetEnvironmentVariable(string name)
        {
            return Environment.GetEnvironmentVariable(name, EnvironmentVariableTarget.Process);
        }
    }
}
